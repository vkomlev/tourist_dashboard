import seaborn as sns
import matplotlib.pyplot as plt
import os
import pandas as pd
import random
import plotly.express as px
from dash import Dash, html, dcc, Input, Output

from app.reports.table_data import Main_page_dashboard, Region_page_dashboard, Weather_page_dashboard, City_page_dashboard
from app.data.database.models_repository import MetricValueRepository


class Main_page_plot:
    @staticmethod
    def plot_heatmap_tourist_count_data():
        mpd = Main_page_dashboard()
        df_pivot = mpd.generate_heatmap_tourist_count_data()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –≤ –º–∏–ª–ª–∏–æ–Ω—ã
        df_pivot = df_pivot / 1_000_000

        plt.figure(figsize=(12, 8))
        
        sns.heatmap(df_pivot, annot=False, cmap="YlGnBu", cbar_kws={'label': '–¢—É—Ä–ø–æ—Ç–æ–∫ (–º–ª–Ω. —á–µ–ª.)'})
        plt.title('–¢—É—Ä–ø–æ—Ç–æ–∫ –ø–æ —Å–µ–∑–æ–Ω–∞–º –≤ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö')

        # –£–º–µ–Ω—å—à–µ–Ω–∏–µ —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π —Ä–µ–≥–∏–æ–Ω–æ–≤
        plt.yticks(rotation=0, fontsize=8)
        plt.xticks(rotation=90, fontsize=8)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        output_dir = os.path.join(os.getcwd(), 'app', 'static', 'images')
        os.makedirs(output_dir, exist_ok=True)
        plt.savefig(os.path.join(output_dir, 'heatmap.png'))
        plt.close()

class Region_page_plot:
    def plot_region_flow_histogram(self, region_id, region_name):
            rpd = Region_page_dashboard()
            df = rpd.get_region_tourist_flow_data(region_id)

            plt.figure(figsize=(12, 8))
            plt.bar(df['period'], df['value'], color='blue')
            plt.xlabel('–ü–µ—Ä–∏–æ–¥ (–≥–æ–¥-–º–µ—Å—è—Ü)')
            plt.ylabel('–¢—É—Ä–ø–æ—Ç–æ–∫')
            plt.title(f'–¢—É—Ä–ø–æ—Ç–æ–∫ –ø–æ —Ä–µ–≥–∏–æ–Ω—É: {region_name}')
            plt.xticks(rotation=90)

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
            output_dir = os.path.join(os.getcwd(), 'app', 'static', 'images')
            os.makedirs(output_dir, exist_ok=True)
            plt.savefig(os.path.join(output_dir, f'histogram_flow_{region_id}.png'))
            plt.close()

    

    def plot_region_dynamics_tourist(self, id_region, year):
        dp = MetricValueRepository()
        tur = dp.get_tourist_count_data_by_region(region_id=id_region)
        df = {
            'x': [i[2] for i in tur],
            'y': [i[1] for i in tur],
            'month': [i[2] for i in tur],
            'year': [i[3] for i in tur]
              }
        df = pd.DataFrame(df)
        df = df[df['year'] == int(year)].sort_values('month')
        # df = df['x'].to_dict()|df['y'].to_dict()
        fig = px.line(df, x='x', y='y').show()
        return fig
    
    def plot_region_leisure_rating(self, id_region):
        # –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∏–∑ –¥—ç—à
        pass
    

class City_page_plot:
    def __init__(self):
        self.wpd = Weather_page_dashboard()
    
    def plot_city_temp_day_night(self, id_city:int) ->plt:
        """–†–∏—Å—É–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –¥–Ω–µ–≤–Ω–æ–π –∏ –Ω–æ—á–Ω–æ–π –ø–æ –º–µ—Å—è—á–Ω–æ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –≥–æ—Ä–æ–¥—É"""
        df = self.wpd.get_city_temp_day_night(id_city=id_city)

        plt.figure(figsize=(12, 8))
        bar_width = 0.35
        index = df['month']

        plt.bar(index, df['day_t'], bar_width, label='–î–µ–Ω—å', color = 'orange')
        plt.bar([i + bar_width for i in index], df['night_t'], bar_width, label='–ù–æ—á—å', color = 'blue')

        plt.xlabel('–ú–µ—Å—è—Ü')
        plt.ylabel('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)')
        plt.title('–î–Ω–µ–≤–Ω–∞—è –∏ –Ω–æ—á–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞')
        plt.xticks([i + bar_width / 2 for i in index], df['month'])
        plt.legend()
        plt.grid(True, linestyle='--', alpha=0.6)
        plt.tight_layout()

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        output_dir = os.path.join(os.getcwd(), 'app', 'static', 'images')
        os.makedirs(output_dir, exist_ok=True)
        plt.savefig(os.path.join(output_dir, f'histogram_city_{id_city}_temperature_day_night.png'))
        plt.close()

    def plot_city_rainfall(self, id_city: int) -> plt:
        """–†–∏—Å—É–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –æ—Å–∞–¥–∫–æ–≤ –≤ –º–º –ø–æ –º–µ—Å—è—á–Ω–æ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –≥–æ—Ä–æ–¥—É"""
        df = self.wpd.get_city_rainfall(id_city=id_city)
        plt.figure(figsize=(12, 8))

        if isinstance(df, bool):
            plt.text(0.5, 0.5, '–î–∞–Ω–Ω—ã—Ö –ø–æ –æ—Å–∞–¥–∫–∞–º –≤ –¥–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç—É',
                    fontsize=16, ha='center', va='center', transform=plt.gca().transAxes)
            plt.axis('off')
        else:
            plt.plot(df['month'], df['rainfall'], marker='o', color='blue', label='–û—Å–∞–¥–∫–∏', linewidth=2)

            plt.xlabel('–ú–µ—Å—è—Ü')
            plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å–∞–¥–∫–æ–≤ (–º–º)')
            plt.title('–û—Å–∞–¥–∫–∏ –ø–æ –º–µ—Å—è—Ü–∞–º')
            plt.xticks(df['month'])
            plt.legend()
            plt.grid(True, linestyle='--', alpha=0.6)
            plt.tight_layout()

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        output_dir = os.path.join(os.getcwd(), 'app', 'static', 'images')
        os.makedirs(output_dir, exist_ok=True)
        plt.savefig(os.path.join(output_dir, f'histogram_city_{id_city}_rainfall.png'))
        plt.close()
    
    def plot_city_temp_water(self, id_city: int) -> plt:
        """–†–∏—Å—É–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤–æ–¥—ã –ø–æ –º–µ—Å—è—á–Ω–æ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –≥–æ—Ä–æ–¥—É"""
        df = self.wpd.get_city_temp_water(id_city=id_city)
        plt.figure(figsize=(12, 8))

        if isinstance(df, bool):
            plt.text(0.5, 0.5, '–î–∞–Ω–Ω—ã—Ö –ø–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ –≤–æ–¥–æ–µ–º–æ–≤ –≤ –¥–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç—É',
                    fontsize=16, ha='center', va='center', transform=plt.gca().transAxes)
            plt.axis('off')
        else:
            plt.fill_between(df['month'], df['water'], color='blue', alpha=0.5, label='–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã')
            plt.plot(df['month'], df['water'], marker='o', color='blue', linewidth=2)

            plt.xlabel('–ú–µ—Å—è—Ü')
            plt.ylabel('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)')
            plt.title('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥–æ–µ–º–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º')
            plt.xticks(df['month'])
            plt.legend()
            plt.grid(True, linestyle='--', alpha=0.6)
            plt.tight_layout()

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        output_dir = os.path.join(os.getcwd(), 'app', 'static', 'images')
        os.makedirs(output_dir, exist_ok=True)
        plt.savefig(os.path.join(output_dir, f'histogram_city_{id_city}_temperature_water.png'))
        plt.close()

    def create_layout(self, id_city):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π."""
        # –°–ª–æ–≤–∞—Ä—å —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–≥–æ–¥–Ω–æ–≥–æ —É—Å–ª–æ–≤–∏—è
        symbols = {
            'warm': '‚òÄÔ∏è',  
            'cold': '‚ùÑÔ∏è', 
            'warm_water': 'üåä',
            'rainfall': 'üåßÔ∏è' 
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
        df = City_page_dashboard()
        weather_summary = df.get_city_weather_summary(id_city=id_city)

        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É –∏ –æ—Å–∏ –¥–ª—è 4 –ø–æ–¥–≥—Ä–∞—Ñ–∏–∫–æ–≤
        fig, axs = plt.subplots(2, 2, figsize=(10, 8))  # 2 —Å—Ç—Ä–æ–∫–∏, 2 —Å—Ç–æ–ª–±—Ü–∞
        fig.patch.set_facecolor('white')  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–µ–ª—ã–π —Ñ–æ–Ω

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ª–æ–≤–∏—è
        conditions = ['warm', 'cold', 'warm_water', 'rainfall']
        colors = ['orange', 'blue', 'cyan', 'green']  # –¶–≤–µ—Ç–∞ –¥–ª—è –∑–Ω–∞—á–∫–æ–≤

        for ax, condition, color in zip(axs.flatten(), conditions, colors):
            ax.set_facecolor('white')  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–µ–ª—ã–π —Ñ–æ–Ω –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥–≥—Ä–∞—Ñ–∏–∫–∞
            ax.axis('off')  # –£–±–∏—Ä–∞–µ–º –æ—Å–∏

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–æ–∫ —Å–ª–µ–≤–∞
            ax.text(0.2, 0.5, symbols[condition], fontsize=40, ha='center', va='center', color=color)

            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–≥–æ–¥–Ω–æ–≥–æ —É—Å–ª–æ–≤–∏—è
            data = weather_summary[condition]

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤ –∏ –∑–Ω–∞—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∞ –æ—Ç –∑–Ω–∞—á–∫–∞
            for i, (month, value) in enumerate(data.items()):
                ax.text(0.5, 0.5 - i * 0.1, f"{month}: {value}¬∞C" if condition != 'rainfall' else f"{month}: {value} –º–º", 
                        fontsize=12, ha='left', va='center')

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        plt.suptitle('–ü–æ–≥–æ–¥–∞', fontsize=16)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        plt.tight_layout(rect=[0, 0.03, 1, 0.95])  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
        plt.show()